openapi: 3.0.3
info:
  title: Guestbook - OpenAPI 3.0
  description: >-
    This is a sample Guestbook Server based on the OpenAPI 3.0 specification. 
    You can find out more about

    Swagger at [https://swagger.io](https://swagger.io). In the third iteration
    of the pet store, we've switched to the design first approach!

    You can now help us improve the API whether it's by making changes to the
    definition itself or to the code.

    That way, with time, we can improve the API in general, and expose some of
    the new features in OAS3.

    Some useful links:

    - [The Guestbook repository](https://github.com/morpheus-oss/spring-demos/guestbook)

    - [The source API definition for the Pet
    Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://guestbook.swagger.io/api/v1
tags:
  - name: rating
    description: Everything about ratings
  - name: hotel
    description: Access to hotel information
paths:
  /hotel/rating:
    put:
      tags:
        - rating
      summary: Update an existing rating
      description: Update an existing rating by Id
      operationId: updateRating
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Rating'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
    post:
      tags:
        - rating
      summary: Add a new rating to the hotel
      description: Add a new rating to the hotel
      operationId: addPet
      requestBody:
        description: Create a new rating for the hotel
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Rating'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
  /hotel/rating/findByStars:
    get:
      tags:
        - rating
      summary: Finds ratings by stars
      description: Multiple status values can be provided with comma separated strings
      operationId: findRatingsByStars
      parameters:
        - name: stars
          in: query
          description: Star values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: integer
            format: int32
            default: 8
            enum:
              - 10
              - 9
              - 8
              - 7
              - 6
              - 5
              - 4
              - 3
              - 2
              - 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
        '400':
          description: Invalid status value
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
  /hotel/rating/findByDate:
    get:
      tags:
        - rating
      summary: Finds Rating by Date
      description: Find ratings by Date
      operationId: findRatingsByDate
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
        '400':
          description: Invalid tag value
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
  /hotel/rating/sortByDate:
    get:
      tags:
        - rating
      summary: Sorts Rating by Date
      description: Sorts Ratings by Date
      operationId: sortRatingsByDate
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
  /hotel/rating/sortByStars:
    get:
      tags:
        - rating
      summary: Sorts rating by stars
      description: Sorts rating by stars
      operationId: sortRatingsByStars
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
  /hotel/rating/{ratingId}:
    get:
      tags:
        - rating
      summary: Find rating by ID
      description: Returns a single rating
      operationId: getRatingById
      parameters:
        - name: ratingId
          in: path
          description: ID of rating to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
        '400':
          description: Invalid ID supplied
        '404':
          description: Rating not found
      security:
        - api_key: []
        - guestbook_auth:
            - write:ratings
            - read:ratings
    put:
      tags:
        - rating
      summary: Updates a rating for the store with form data
      description: ''
      operationId: updateRatingWithForm
      parameters:
        - name: ratingId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: stars
          in: query
          description: Star rating that needs to be updated
          schema:
            type: integer
            format: int32
        - name: comment
          in: query
          description: Comment of rating that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
  /hotel:
    get:
      tags:
        - hotel
      summary: Returns all hotels in Guestbook
      description: Returns a links of status codes to quantities
      operationId: listHotel
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
      security:
        - guestbook_auth:
            - write:hotels
            - read:hotels
    post:
      tags:
        - hotel
      summary: Add a hotel
      description: Add new hotel
      operationId: addHotel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hotel'
          application/xml:
            schema:
              $ref: '#/components/schemas/Hotel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Hotel'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - guestbook_auth:
            - write:hotels
            - read:hotels
  /hotel/{hotelId}:
    get:
      tags:
        - hotel
      summary: Find hotel by ID
      description: Find hotel by ID
      operationId: getHotelById
      parameters:
        - name: hotelId
          in: path
          description: ID of hotel that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
            application/xml:
              schema:
                $ref: '#/components/schemas/Hotel'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - guestbook_auth:
            - write:hotels
            - read:hotels
    put:
      tags:
        - hotel
      summary: Updates hotel info by ID
      description: Updates hotel info by ID
      operationId: updateHotelById
      parameters:
        - name: hotelId
          in: path
          description: ID of hotel that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
            application/xml:
              schema:
                $ref: '#/components/schemas/Hotel'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - guestbook_auth:
            - write:hotels
            - read:hotels
    delete:
      tags:
        - hotel
      summary: Delete hotel by ID
      description: Delete hotel by ID
      operationId: deleteHotel
      parameters:
        - name: hotelId
          in: path
          description: ID of the hotel that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - guestbook_auth:
            - write:hotels
            - read:hotels
components:
  schemas:
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        pincode:
          type: string
          example: '94301'
      xml:
        name: address
    Hotel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        name:
          type: string
          example: fehguy
        address:
          type: object
          xml:
            name: address
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    User:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
      xml:
        name: user
    Tag:
      type: object
      properties:
        stars:
          type: integer
          format: int32
        name:
          type: string
      xml:
        name: tag
    Rating:
      required:
        - guestuser
        - hotelId
        - stars
        - comment
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        hotelId:
          type: integer
          format: int64
          example: 63566
        guestuser:
          type: object
          xml:
            name: guest
            wrapped: true
          items:
            $ref: '#/components/schemas/User'
        stars:
          type: integer
          example: 5
        comment:
          type: string
          example: <Your experience in the hotel>
        commentedDate:
          type: string
          format: date-time
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
      xml:
        name: rating
  securitySchemes:
    guestbook_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://guestbook.swagger.io/oauth/authorize
          scopes:
            write:ratings: Add/Modify ratings
            read:ratings: Read your ratings
            write:hotels: Add/Modify hotel details
            read:hotels: Read hotel details
    api_key:
      type: apiKey
      name: api_key
      in: header
