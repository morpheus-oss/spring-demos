openapi: 3.0.3
info:
  title: Guestbook - OpenAPI 3.0
  description: >-
    This is a sample Guestbook Server based on the OpenAPI 3.0 specification. 


    Some useful links:

    - [The Guestbook
    repository](https://github.com/morpheus-oss/spring-demos/guestbook)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://guestbook.swagger.io/api/v1
tags:
  - name: rating
    description: Everything about ratings
  - name: hotel
    description: Add, Get, Update and Delete locality details
  - name: city
    description: Add, Get, Update city details
  - name: locality
    description: Add, Get, Update locality details
  - name: state
    description: List all states and union territories of India
paths:
  /hotel/{hotelId}/rating:
    post:
      tags:
        - rating
      summary: Add a new rating to the hotel
      description: Add a new rating to the hotel
      operationId: addRating
      parameters:
        - in: path
          name: hotelId
          required: true
          explode: false
          schema:
            type: string
      requestBody:
        description: Create a new rating for the hotel
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Rating'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
    get:
      tags:
        - rating
      summary: List ratings for a particular hotel
      description: List ratings for a particular hotel
      operationId: listHotelRatings
      parameters:
        - in: path
          name: hotelId
          required: true
          explode: false
          schema:
            type: string
        - name: user
          in: query
          description: user that need to be considered
          required: false
          explode: false
          schema:
            type: string
        - name: date
          in: query
          description: Commented date that need to be considered
          required: false
          explode: false
          schema:
            type: string
        - name: stars
          in: query
          description: Star values that need to be considered
          required: false
          explode: true
          schema:
            type: integer
            format: int32
            enum:
              - 10
              - 9
              - 8
              - 7
              - 6
              - 5
              - 4
              - 3
              - 2
              - 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
  /rating:
    get:
      tags:
        - rating
      summary: Lists Rating by Date
      description: List Ratings by Date
      operationId: listRatingsByDate
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
  /rating/{user}:
    get:
      tags:
        - rating
      summary: Lists Rating by a particular user
      description: List Ratings by a user
      operationId: listRatingsByUser
      parameters:
        - name: user
          in: path
          required: true
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
  /rating/{locality}:
    get:
      tags:
        - rating
      summary: Lists Rating of hotels in a particular locality
      description: List Ratings by a user
      operationId: listRatingsInLocality
      parameters:
        - name: locality
          in: path
          required: true
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
      security:
        - guestbook_auth:
            - write:ratings
            - read:ratings
  /hotel:
    get:
      tags:
        - hotel
      summary: Returns all hotels in Guestbook
      description: Returns a links of status codes to quantities
      operationId: listHotel
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
      security:
        - guestbook_auth:
            - write:hotels
            - read:hotels
    post:
      tags:
        - hotel
      summary: Add a hotel
      description: Add new hotel
      operationId: addHotel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hotel'
          application/xml:
            schema:
              $ref: '#/components/schemas/Hotel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Hotel'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - guestbook_auth:
            - write:hotels
            - read:hotels
  /hotel/{hotelId}:
    get:
      tags:
        - hotel
      summary: Find hotel by ID
      description: Find hotel by ID
      operationId: getHotelById
      parameters:
        - name: hotelId
          in: path
          description: ID of hotel that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
            application/xml:
              schema:
                $ref: '#/components/schemas/Hotel'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - guestbook_auth:
            - write:hotels
            - read:hotels
    put:
      tags:
        - hotel
      summary: Updates hotel info by ID
      description: Updates hotel info by ID
      operationId: updateHotelById
      parameters:
        - name: hotelId
          in: path
          description: ID of hotel that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
            application/xml:
              schema:
                $ref: '#/components/schemas/Hotel'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - guestbook_auth:
            - write:hotels
            - read:hotels
    delete:
      tags:
        - hotel
      summary: Delete hotel by ID
      description: Delete hotel by ID
      operationId: deleteHotel
      parameters:
        - name: hotelId
          in: path
          description: ID of the hotel that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid Hotel details supplied
        '404':
          description: Hotel not found
      security:
        - guestbook_auth:
            - write:hotels
            - read:hotels
  /city:
    get:
      tags:
        - city
      summary: List all cities
      description: List all cities
      operationId: listCities
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
      security:
        - guestbook_auth:
            - write:cities
            - read:cities
    post:
      tags:
        - city
      summary: Add a new city
      description: Add a new city
      operationId: addCity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
          application/xml:
            schema:
              $ref: '#/components/schemas/City'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
      security:
        - guestbook_auth:
            - write:cities
            - read:cities
  /city/{cityId}:
    put:
      tags:
        - city
      summary: Update city, state (name change)
      description: Update city, state (name change)
      operationId: updateCity
      parameters:
        - name: cityId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
          application/xml:
            schema:
              $ref: '#/components/schemas/City'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
      security:
        - guestbook_auth:
            - write:cities
            - read:cities
  /city/{stateId}:
    get:
      tags:
        - city
      summary: Get all cities in the state
      description: Get all cities in the state
      operationId: getCitiesByState
      parameters:
        - name: stateId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
        '404':
          description: State not found
      security:
        - guestbook_auth:
            - write:cities
            - read:cities
  /city/{cityId}/locality:
    post:
      tags:
        - locality
      summary: Add a new locality
      description: Add a new locality
      operationId: addLocality
      parameters:
        - name: cityId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
          application/xml:
            schema:
              $ref: '#/components/schemas/City'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
      security:
        - guestbook_auth:
            - write:cities
            - read:cities
    get:
      tags:
        - locality
      summary: Get localities in the city
      description: Get localities in the city
      operationId: getLocality
      parameters:
        - name: cityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locality'
            application/xml:
              schema:
                $ref: '#/components/schemas/Locality'
      security:
        - guestbook_auth:
            - write:cities
            - read:cities
  /city/{cityId}/locality/{localityId}:
    put:
      tags:
        - locality
      summary: Update the locality details (name/pincode changes)
      description: Update the locality details (name/pincode changes)
      operationId: updateLocality
      parameters:
        - name: cityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: localityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
          application/xml:
            schema:
              $ref: '#/components/schemas/City'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locality'
            application/xml:
              schema:
                $ref: '#/components/schemas/Locality'
        '404':
          description: City/Locality not found.
      security:
        - guestbook_auth:
            - write:cities
            - read:cities
  /states:
    get:
      tags:
        - state
      summary: List all states and union-territories of India
      description: List all states and union-territories of India
      operationId: listStates
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
            application/xml:
              schema:
                $ref: '#/components/schemas/State'
      security:
        - guestbook_auth:
            - write:cities
            - read:cities
components:
  schemas:
    State:
      type: object
      properties:
        id:
          type: integer
          example: 5
        name:
          type: string
          example: Assam
    City:
      type: object
      properties:
        name:
          type: string
          example: Bangalore
        state:
          type: string
          example: Karnataka
    Locality:
      type: object
      properties:
        name:
          type: string
          example: HSR Layout
        city:
          type: string
          example: Bangalore
        pincode:
          type: string
          example: '560102'
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        pincode:
          type: string
          example: '94301'
      xml:
        name: address
    Hotel:
      type: object
      required:
        - name
        - street
        - locality
        - city
        - state
        - pincode
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        name:
          type: string
          example: Marriot
        street:
          type: string
          example: '19th Cross'
        locality:
          type: string
          example: 'HSR Layout'
        city:
          type: string
          example: 'Bangalore'
        state:
          type: string
          example: 'Karnataka'
        pincode:
          type: string
          example: '560102'
      xml:
        name: customer
    User:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
      xml:
        name: user
    Tag:
      type: object
      properties:
        stars:
          type: integer
          format: int8
        name:
          type: string
      xml:
        name: tag
    Rating:
      required:
        - guestName
        - guestEmail
        - guestPhone
        - stars
        - comment
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        hotelId:
          type: integer
          format: int64
          example: 1234
        guestName:
          type: string
          example: John Doe
        guestEmail:
          type: string
          example: john@email.com
        guestPhone:
          type: string
          example: '12345'
        stars:
          type: integer
          example: 5
        comment:
          type: string
          example: Your experience in the hotel
        commentedDate:
          type: string
          format: date-time
      xml:
        name: rating
  securitySchemes:
    guestbook_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://guestbook.swagger.io/oauth/authorize
          scopes:
            write:ratings: Add/Modify ratings
            read:ratings: Read your ratings
            write:hotels: Add/Modify hotel details
            read:hotels: Read hotel details
            write:cities: Add/Modify cities/localities
            read:cities: Read all cities/localities
    api_key:
      type: apiKey
      name: api_key
      in: header
